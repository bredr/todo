/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

var google_protobuf_timestamp_pb = require("google-protobuf/google/protobuf/timestamp_pb.js");
goog.exportSymbol("proto.todo.Empty", null, global);
goog.exportSymbol("proto.todo.ID", null, global);
goog.exportSymbol("proto.todo.Item", null, global);
goog.exportSymbol("proto.todo.Items", null, global);
goog.exportSymbol("proto.todo.Pagination", null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.todo.Item.displayName = "proto.todo.Item";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.todo.Item.prototype.toObject = function(opt_includeInstance) {
    return proto.todo.Item.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.todo.Item} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.todo.Item.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
        description: jspb.Message.getFieldWithDefault(msg, 2, ""),
        due:
          (f = msg.getDue()) &&
          google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        created:
          (f = msg.getCreated()) &&
          google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        hourstocomplete: jspb.Message.getFieldWithDefault(msg, 5, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.Item}
 */
proto.todo.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.Item();
  return proto.todo.Item.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.Item}
 */
proto.todo.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setDescription(value);
        break;
      case 3:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(
          value,
          google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
        );
        msg.setDue(value);
        break;
      case 4:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(
          value,
          google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
        );
        msg.setCreated(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setHourstocomplete(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getDue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getHourstocomplete();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
};

/**
 * optional string ID = 1;
 * @return {string}
 */
proto.todo.Item.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.todo.Item.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string Description = 2;
 * @return {string}
 */
proto.todo.Item.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/** @param {string} value */
proto.todo.Item.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional google.protobuf.Timestamp Due = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.todo.Item.prototype.getDue = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    3
  ));
};

/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.todo.Item.prototype.setDue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.todo.Item.prototype.clearDue = function() {
  this.setDue(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.todo.Item.prototype.hasDue = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional google.protobuf.Timestamp Created = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.todo.Item.prototype.getCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    4
  ));
};

/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.todo.Item.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.todo.Item.prototype.clearCreated = function() {
  this.setCreated(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.todo.Item.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional int32 HoursToComplete = 5;
 * @return {number}
 */
proto.todo.Item.prototype.getHourstocomplete = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/** @param {number} value */
proto.todo.Item.prototype.setHourstocomplete = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.Items = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.todo.Items.repeatedFields_,
    null
  );
};
goog.inherits(proto.todo.Items, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.todo.Items.displayName = "proto.todo.Items";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.todo.Items.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.todo.Items.prototype.toObject = function(opt_includeInstance) {
    return proto.todo.Items.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.todo.Items} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.todo.Items.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        itemsList: jspb.Message.toObjectList(
          msg.getItemsList(),
          proto.todo.Item.toObject,
          includeInstance
        ),
        total: jspb.Message.getFieldWithDefault(msg, 2, 0),
        limit: jspb.Message.getFieldWithDefault(msg, 3, 0),
        offset: jspb.Message.getFieldWithDefault(msg, 4, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.Items}
 */
proto.todo.Items.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.Items();
  return proto.todo.Items.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.Items} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.Items}
 */
proto.todo.Items.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.todo.Item();
        reader.readMessage(value, proto.todo.Item.deserializeBinaryFromReader);
        msg.addItems(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setTotal(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLimit(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setOffset(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.Items.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.Items.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.Items} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.Items.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.todo.Item.serializeBinaryToWriter);
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
};

/**
 * repeated Item Items = 1;
 * @return {!Array<!proto.todo.Item>}
 */
proto.todo.Items.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.todo.Item>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.todo.Item,
    1
  ));
};

/** @param {!Array<!proto.todo.Item>} value */
proto.todo.Items.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.todo.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.todo.Item}
 */
proto.todo.Items.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.todo.Item,
    opt_index
  );
};

proto.todo.Items.prototype.clearItemsList = function() {
  this.setItemsList([]);
};

/**
 * optional int32 Total = 2;
 * @return {number}
 */
proto.todo.Items.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.todo.Items.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int32 Limit = 3;
 * @return {number}
 */
proto.todo.Items.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.todo.Items.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional int32 Offset = 4;
 * @return {number}
 */
proto.todo.Items.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/** @param {number} value */
proto.todo.Items.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.ID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.ID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.todo.ID.displayName = "proto.todo.ID";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.todo.ID.prototype.toObject = function(opt_includeInstance) {
    return proto.todo.ID.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.todo.ID} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.todo.ID.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.ID}
 */
proto.todo.ID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.ID();
  return proto.todo.ID.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.ID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.ID}
 */
proto.todo.ID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.ID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.ID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.ID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string ID = 1;
 * @return {string}
 */
proto.todo.ID.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.todo.ID.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.Pagination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.Pagination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.todo.Pagination.displayName = "proto.todo.Pagination";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.todo.Pagination.prototype.toObject = function(opt_includeInstance) {
    return proto.todo.Pagination.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.todo.Pagination} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.todo.Pagination.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        limit: jspb.Message.getFieldWithDefault(msg, 1, 0),
        offset: jspb.Message.getFieldWithDefault(msg, 2, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.Pagination}
 */
proto.todo.Pagination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.Pagination();
  return proto.todo.Pagination.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.Pagination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.Pagination}
 */
proto.todo.Pagination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLimit(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setOffset(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.Pagination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.Pagination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.Pagination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.Pagination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
};

/**
 * optional int32 Limit = 1;
 * @return {number}
 */
proto.todo.Pagination.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.todo.Pagination.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int32 Offset = 2;
 * @return {number}
 */
proto.todo.Pagination.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.todo.Pagination.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.todo.Empty.displayName = "proto.todo.Empty";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.todo.Empty.prototype.toObject = function(opt_includeInstance) {
    return proto.todo.Empty.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.todo.Empty} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.todo.Empty.toObject = function(includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.Empty}
 */
proto.todo.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.Empty();
  return proto.todo.Empty.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.Empty}
 */
proto.todo.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};

goog.object.extend(exports, proto.todo);
